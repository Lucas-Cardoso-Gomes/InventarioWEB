@{
    ViewData["Title"] = "Acesso Remoto";
    Layout = "~/Views/Shared/_RemoteAccessLayout.cshtml";
}

<div class="text-center">
    <h1 class="display-4">Acesso Remoto a @ViewBag.Ip</h1>
    <div>
        <button id="fullscreen-btn" class="btn btn-secondary mb-2">Tela Cheia</button>
        <button id="lock-mouse-btn" class="btn btn-primary mb-2">Travar Mouse</button>
        <button id="send-ctrl-alt-del-btn" class="btn btn-danger mb-2">Enviar Ctrl+Alt+Del</button>
    </div>
    <div class="mt-3">
        <input type="file" id="file-input" class="form-control-file" />
        <button id="upload-file-btn" class="btn btn-success">Enviar Arquivo</button>
    </div>
    <div id="remote-screen-container" class="mt-3" style="position: relative; width: 100%; height: auto;">
        <img id="screen" src="" class="img-fluid" style="display: block; width: 100%; height: auto;" />
    </div>
</div>

@section Scripts {
    <script>
        const ip = "@ViewBag.Ip";
        const screen = document.getElementById("screen");
        let currentBlobUrl = null;
        let originalWidth = 0;
        let originalHeight = 0;

        let latestBlob = null;
        let isFetching = false;

        function fetchScreen() {
            if (isFetching) return;
            isFetching = true;

            fetch(`/RemoteAccess/GetScreenStream?ip=${ip}`)
                .then(response => {
                    if (!response.ok) {
                        console.error("Erro ao buscar imagem:", response.status, response.statusText);
                        return Promise.reject(new Error('Resposta do servidor não foi OK'));
                    }
                    originalWidth = parseInt(response.headers.get("X-Original-Width"));
                    originalHeight = parseInt(response.headers.get("X-Original-Height"));
                    return response.blob();
                })
                .then(blob => {
                    if (blob && blob.size > 0) {
                        latestBlob = blob;
                    } else {
                        console.warn("Recebido um blob vazio ou inválido.");
                    }
                })
                .catch(error => {
                    console.error("Falha na requisição de fetch:", error);
                })
                .finally(() => {
                    isFetching = false;
                });
        }

        function updateScreen() {
            if (latestBlob) {
                if (currentBlobUrl) {
                    URL.revokeObjectURL(currentBlobUrl);
                }
                currentBlobUrl = URL.createObjectURL(latestBlob);
                screen.src = currentBlobUrl;
                latestBlob = null;
            }
            window.requestAnimationFrame(updateScreen);
        }

        function sendMouseEvent(type, x, y, deltaY) {
            if (originalWidth === 0 && type !== 'wheel') return;

            let scaledX = x;
            let scaledY = y;

            if (type !== 'move' && type !== 'wheel') {
                const rect = screen.getBoundingClientRect();
                const scaleX = originalWidth / rect.width;
                const scaleY = originalHeight / rect.height;
                scaledX = Math.round((x - rect.left) * scaleX);
                scaledY = Math.round((y - rect.top) * scaleY);
            }

            fetch(`/RemoteAccess/SendMouse?ip=${ip}`, {
                method: "POST",
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ type, x: scaledX, y: scaledY, deltaY })
            });
        }

        screen.addEventListener("mousedown", e => {
            e.preventDefault();
            sendMouseEvent(`down_${e.button}`, e.clientX, e.clientY, 0);
        });

        screen.addEventListener("mouseup", e => {
            e.preventDefault();
            sendMouseEvent(`up_${e.button}`, e.clientX, e.clientY, 0);
        });

        screen.addEventListener("wheel", e => {
            e.preventDefault();
            sendMouseEvent("wheel", 0, 0, e.deltaY);
        }, { passive: false });

        screen.addEventListener("contextmenu", e => e.preventDefault());

        document.addEventListener('pointerlockchange', () => {
            if (document.pointerLockElement === screen) {
                document.addEventListener("mousemove", handleMouseMove, false);
            } else {
                document.removeEventListener("mousemove", handleMouseMove, false);
            }
        }, false);

        function handleMouseMove(e) {
            sendMouseEvent("move", e.movementX, e.movementY, 0);
        }

        function handleKeyboard(e, state) {
            if (isFullscreen) {
                e.preventDefault();
                e.stopPropagation();
            }
            fetch(`/RemoteAccess/SendKeyboard?ip=${ip}&key=${e.code}&state=${state}`, { method: "POST" });
        }

        document.addEventListener("keydown", (e) => handleKeyboard(e, "down"));
        document.addEventListener("keyup", (e) => handleKeyboard(e, "up"));

        const lockButton = document.getElementById("lock-mouse-btn");
        const ctrlAltDelButton = document.getElementById("send-ctrl-alt-del-btn");
        const syncClipboardButton = document.getElementById("sync-clipboard-btn");
        const fullscreenButton = document.getElementById("fullscreen-btn");
        const screenContainer = document.getElementById("remote-screen-container");
        let isFullscreen = false;

        lockButton.addEventListener("click", () => {
            screen.requestPointerLock();
        });

        ctrlAltDelButton.addEventListener("click", () => {
            fetch(`/RemoteAccess/SendCommand?ip=${ip}&command=send_ctrl_alt_del`, { method: "POST" });
        });

        fullscreenButton.addEventListener("click", () => {
            if (!document.fullscreenElement) {
                screenContainer.requestFullscreen().catch(err => {
                    alert(`Error attempting to enable full-screen mode: ${err.message} (${err.name})`);
                });
            } else {
                document.exitFullscreen();
            }
        });

        document.addEventListener("fullscreenchange", () => {
            isFullscreen = !!document.fullscreenElement;
        });

        document.addEventListener("copy", (e) => {
            const text = document.getSelection().toString();
            if (text) {
                fetch(`/RemoteAccess/SendClipboard?ip=${ip}`, {
                    method: "POST",
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(text)
                });
            }
        });

        document.addEventListener("cut", (e) => {
            const text = document.getSelection().toString();
            if (text) {
                fetch(`/RemoteAccess/SendClipboard?ip=${ip}`, {
                    method: "POST",
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(text)
                });
            }
        });

        document.addEventListener("paste", (e) => {
            e.preventDefault();
            fetch(`/RemoteAccess/GetClipboard?ip=${ip}`)
                .then(response => response.text())
                .then(text => {
                    if (document.execCommand) {
                        document.execCommand("insertText", false, text);
                    } else {
                        navigator.clipboard.writeText(text);
                    }
                });
        });

        const uploadButton = document.getElementById("upload-file-btn");
        const fileInput = document.getElementById("file-input");

        uploadButton.addEventListener("click", () => {
            const file = fileInput.files[0];
            if (file) {
                const formData = new FormData();
                formData.append("file", file);
                fetch(`/RemoteAccess/UploadFile?ip=${ip}`, {
                    method: "POST",
                    body: formData
                });
            }
        });

        document.addEventListener('pointerlockchange', () => {
            if (document.pointerLockElement === screen) {
                document.addEventListener("mousemove", handleMouseMove, false);
            } else {
                document.removeEventListener("mousemove", handleMouseMove, false);
            }
        }, false);

        function handleMouseMove(e) {
            fetch(`/RemoteAccess/SendMouse?ip=${ip}&x=${e.movementX}&y=${e.movementY}&type=move`, { method: "POST" });
        }

        setInterval(fetchScreen, 100);
        window.requestAnimationFrame(updateScreen);
    </script>
}
