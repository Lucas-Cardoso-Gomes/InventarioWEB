@model IDictionary<string, List<Web.Models.Rede>>

@{
    ViewData["Title"] = "Monitoramento de Rede";
}

<h1>@ViewData["Title"]</h1>

<h2>Tempo de An√°lise: <span id="uptime">00.00:00:00</span></h2>

<div class="mb-3">
    <button class="btn btn-primary" id="expand-all">Expandir Tudo</button>
    <button class="btn btn-secondary" id="collapse-all">Recolher Tudo</button>
</div>

<div class="accordion" id="network-devices-accordion">
    @foreach (var group in Model.OrderBy(g => g.Key))
    {
        var deviceType = group.Key;
        var devices = group.Value;
        var collapseId = $"collapse-{deviceType.Replace(" ", "-").Replace("/", "-")}";
        var headerId = $"header-{deviceType.Replace(" ", "-").Replace("/", "-")}";

        <div class="accordion-item">
            <h2 class="accordion-header" id="@headerId">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#@collapseId" aria-expanded="false" aria-controls="@collapseId">
                    @deviceType <span class="badge bg-primary ms-2">@devices.Count</span>
                </button>
            </h2>
            <div id="@collapseId" class="accordion-collapse collapse" aria-labelledby="@headerId" data-bs-parent="#network-devices-accordion">
                <div class="accordion-body">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Nome</th>
                                <th>IP</th>
                                <th>Status</th>
                                <th>% de perca (~1 Hora)</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in devices.OrderBy(d => d.Nome))
                            {
                                <tr id="rede-@item.Id">
                                    <td>@item.Nome</td>
                                    <td>@item.IP</td>
                                    <td class="status-cell">
                                        <span class="status-indicator @(item.Status?.ToLower() ?? "gray")"></span>
                                        <span class="status-text">@(item.Status ?? "N/A")</span>
                                    </td>
                                    <td class="loss-percentage-cell">
                                        @item.LossPercentage.ToString("F2")%
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>

@section Styles {
    <style>
        .status-indicator {
            display: inline-block;
            width: 15px;
            height: 15px;
            border-radius: 50%;
            margin-right: 5px;
            vertical-align: middle;
        }

        .status-indicator.online, .status-indicator.green {
            background-color: #28a745;
        }

        .status-indicator.offline, .status-indicator.red {
            background-color: #dc3545;
        }

        .status-indicator.latency, .status-indicator.yellow {
            background-color: #ffc107;
        }

        .status-indicator.unknown, .status-indicator.gray {
            background-color: #6c757d;
        }

        .accordion-button:not(.collapsed) {
            color: #0c63e4;
            background-color: #e7f1ff;
        }
    </style>
}

@section Scripts {
    <script>
        $(document).ready(function () {
            function updateStatus() {
                $.get('@Url.Action("GetStatus", "Monitoramento")', function (data) {
                    data.forEach(function (item) {
                        var row = $('#rede-' + item.id);
                        if (row.length === 0) return;

                        var statusCell = row.find('.status-cell');
                        var indicator = statusCell.find('.status-indicator');
                        var text = statusCell.find('.status-text');
                        var lossCell = row.find('.loss-percentage-cell');

                        var statusClass = item.status ? item.status.toLowerCase() : 'gray';

                        indicator.removeClass('online offline latency unknown green red yellow gray').addClass(statusClass);
                        text.text(item.status || 'N/A');
                        lossCell.text(item.lossPercentage.toFixed(2) + '%');
                    });
                });
            }

            function updateUptime() {
                $.get('@Url.Action("GetUptime", "Monitoramento")', function (data) {
                    $('#uptime').text(data.uptime);
                });
            }

            $('#expand-all').on('click', function () {
                $('.accordion-button.collapsed').trigger('click');
            });

            $('#collapse-all').on('click', function () {
                $('.accordion-button:not(.collapsed)').trigger('click');
            });

            setInterval(updateStatus, 15000);
            updateStatus();

            setInterval(updateUptime, 1000);
            updateUptime();
        });
    </script>
}
